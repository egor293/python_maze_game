import os
import sys
import random
from collections import deque

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–¥–∞
WALL = '‚ñà'    # –°—Ç–µ–Ω–∞
FLOOR = ' '   # –ü–æ–ª (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ '¬∑' –¥–ª—è —Ç–æ—á–µ–∫, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ–±–µ–ª –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã)
PLAYER = '‚ò∫'  # –ò–≥—Ä–æ–∫ (—É–ª—ã–±–∞—é—â–µ–µ—Å—è –ª–∏—Ü–æ)
EXIT = 'üö™'    # –í—ã—Ö–æ–¥ (–¥–≤–µ—Ä—å, –µ—Å–ª–∏ –∫–æ–Ω—Å–æ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Unicode; –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'E')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
HEIGHT = 11  # –í—ã—Å–æ—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
WIDTH = 17   # –®–∏—Ä–∏–Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (—Å—Ç–µ–Ω—ã –ø–æ –∫—Ä–∞—è–º, –ø–æ–ª –≤–Ω—É—Ç—Ä–∏)
def create_empty_maze(width, height):
    maze = [[WALL for _ in range(width)] for _ in range(height)]
    for r in range(1, height - 1):
        for c in range(1, width - 1):
            maze[r][c] = FLOOR
    return maze

# –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def generate_maze(maze, top, bottom, left, right):
    if bottom - top < 3 or right - left < 3:
        return
    # –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç–µ–Ω—ã
    h_wall = random.randint(top + 1, bottom - 2)
    v_wall = random.randint(left + 1, right - 2)
    # –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å—Ç–µ–Ω—É
    for c in range(left, right):
        maze[h_wall][c] = WALL
    # –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å—Ç–µ–Ω—É
    for r in range(top, bottom):
        maze[r][v_wall] = WALL
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ö–æ–¥—ã (3 –∏–∑ 4 —Å–ª—É—á–∞–π–Ω—ã—Ö)
    passages = [
        (h_wall, random.randint(left, v_wall - 1)),  # –õ–µ–≤—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π
        (h_wall, random.randint(v_wall + 1, right - 1)),  # –ü—Ä–∞–≤—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π
        (random.randint(top, h_wall - 1), v_wall),  # –í–µ—Ä—Ö–Ω–∏–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π
        (random.randint(h_wall + 1, bottom - 1), v_wall),  # –ù–∏–∂–Ω–∏–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π
    ]
    # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ—Ç–∫—Ä–æ–µ–º
    no_open_index = random.randint(0, 3)
    for i in range(4):
        if i != no_open_index:
            r, c = passages[i]
            maze[r][c] = FLOOR
    # –†–µ–∫—É—Ä—Å–∏—è –¥–ª—è —á–µ—Ç—ã—Ä–µ—Ö —Å–µ–∫—Ü–∏–π
    generate_maze(maze, top, h_wall, left, v_wall)
    generate_maze(maze, top, h_wall, v_wall + 1, right)
    generate_maze(maze, h_wall + 1, bottom, left, v_wall)
    generate_maze(maze, h_wall + 1, bottom, v_wall + 1, right)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (BFS)
def is_solvable(maze, start, end):
    rows, cols = len(maze), len(maze[0])
    visited = [[False] * cols for _ in range(rows)]
    queue = deque([start])
    visited[start[0]][start[1]] = True
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right
    
    while queue:
        r, c = queue.popleft()
        if (r, c) == end:
            return True
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and maze[nr][nc] != WALL:
                visited[nr][nc] = True
                queue.append((nr, nc))
    return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏
def generate_solvable_maze():
    while True:
        maze = create_empty_maze(WIDTH, HEIGHT)
        generate_maze(maze, 0, HEIGHT, 0, WIDTH)
        start = (1, 1)
        end = (HEIGHT - 2, WIDTH - 2)
        maze[start[0]][start[1]] = FLOOR  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ä—Ç —á–∏—Å—Ç
        maze[end[0]][end[1]] = FLOOR      # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω–µ—Ü —á–∏—Å—Ç
        if is_solvable(maze, start, end):
            maze[start[0]][start[1]] = PLAYER
            maze[end[0]][end[1]] = EXIT
            return maze

maze = generate_solvable_maze()

# –†–∞–∑–º–µ—Ä—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
rows = len(maze)
cols = len(maze[0])

# –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
def find_player():
    for r in range(rows):
        for c in range(cols):
            if maze[r][c] == PLAYER:
                return r, c
    return None

player_row, player_col = find_player()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def draw_maze():
    clear_screen()
    for row in maze:
        print(''.join(row))
    print("\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W - –≤–≤–µ—Ä—Ö, A - –≤–ª–µ–≤–æ, S - –≤–Ω–∏–∑, D - –≤–ø—Ä–∞–≤–æ. Q - –≤—ã—Ö–æ–¥.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
draw_maze()
while True:
    move = input("–í–∞—à —Ö–æ–¥: ").lower()
    if move == 'q':
        print("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        sys.exit()

    new_row, new_col = player_row, player_col

    if move == 'w':
        new_row -= 1
    elif move == 's':
        new_row += 1
    elif move == 'a':
        new_col -= 1
    elif move == 'd':
        new_col += 1
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WASD –∏–ª–∏ Q –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        continue

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    if new_row < 0 or new_row >= rows or new_col < 0 or new_col >= cols:
        print("–ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞!")
        continue

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–µ–Ω—É
    if maze[new_row][new_col] == WALL:
        print("–°—Ç–µ–Ω–∞! –ù–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏.")
        continue

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥
    if maze[new_row][new_col] == EXIT:
        clear_screen()
        print("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –≤—ã—Ö–æ–¥.")
        sys.exit()

    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    maze[player_row][player_col] = FLOOR
    maze[new_row][new_col] = PLAYER
    player_row, player_col = new_row, new_col

    draw_maze()